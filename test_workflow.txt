make install
make init-golang-rly
make start-golang-rly

# Store the following account addresses within the current shell env
export WALLET_1=$(icad keys show wallet1 -a --keyring-backend test --home ./data/test-1) && echo $WALLET_1;
export WALLET_2=$(icad keys show wallet2 -a --keyring-backend test --home ./data/test-1) && echo $WALLET_2;
export WALLET_3=$(icad keys show wallet3 -a --keyring-backend test --home ./data/test-2) && echo $WALLET_3;
export WALLET_4=$(icad keys show wallet4 -a --keyring-backend test --home ./data/test-2) && echo $WALLET_4;

#setup ICA account from controller chain (chain 1 id test-1)
icad tx intertx register --from $WALLET_1 --connection-id connection-0 --chain-id test-1 --home ./data/test-1 --node tcp://localhost:16657 --keyring-backend test --timeout-height 1000

# Query the address of the interchain account
icad query intertx interchainaccounts connection-0 $WALLET_1 --home ./data/test-1 --node tcp://localhost:16657

# Store the interchain account address by parsing the query result: cosmos1hd0f4u7zgptymmrn55h3hy20jv2u0ctdpq23cpe8m9pas8kzd87smtf8al
export ICA_ADDR=$(icad query intertx interchainaccounts connection-0 $WALLET_1 --home ./data/test-1 --node tcp://localhost:16657 -o json | jq -r '.interchain_account_address') && echo $ICA_ADDR

# On host chain, setup default minimum price to accept order (100)
icad tx nameservice set-minprice 100  --chain-id test-2 --home ./data/test-2 --keyring-backend test --from $WALLET_1
icad q nameservice show-testmin --chain-id test-2 --home ./data/test-2 --node tcp://localhost:26657

# Show that there is no name registered
icad q nameservice list-whois --chain-id test-2 --home ./data/test-2 --node tcp://localhost:26657

# submit ICA tx to register a name domain under ICA address with bid = 200
icad tx intertx submit \
"{
    \"@type\":\"/cosmos.interchainaccounts.nameservice.MsgBuyName\",
    \"creator\": \"$ICA_ADDR\",
    \"name\":\"inter_chain_acount_bid200\",
    \"bid\":\"200\"
}" --connection-id connection-0 --from $WALLET_1 --chain-id test-1 --home ./data/test-1 --node tcp://localhost:16657 --keyring-backend test -y

# show that it's confirmed on host chain
icad q nameservice list-whois --node tcp://localhost:26657


# On host chain, Control the minimum price to accept order larger than 1000
icad tx nameservice set-minprice 1000  --chain-id test-2 --home ./data/test-2 --keyring-backend test --from $WALLET_1
icad q nameservice show-testmin --node tcp://localhost:26657

# submit ICA tx to register a name domain under ICA address with bid = 500
icad tx intertx submit \
"{
    \"@type\":\"/cosmos.interchainaccounts.nameservice.MsgBuyName\",
    \"creator\": \"$ICA_ADDR\",
    \"name\":\"inter_chain_acount_bid500\",
    \"bid\":\"500\"
}" --connection-id connection-0 --from $WALLET_1 --chain-id test-1 --home ./data/test-1 --node tcp://localhost:16657 --keyring-backend test -y

# show that it's rejected on host chain, only the old record is in the list
icad q nameservice list-whois --node tcp://localhost:26657



# submit another ICA tx to register a name domain under ICA address with bid = 5000
icad tx intertx submit \
"{
    \"@type\":\"/cosmos.interchainaccounts.nameservice.MsgBuyName\",
    \"creator\": \"$ICA_ADDR\",
    \"name\":\"inter_chain_acount_bid5000\",
    \"bid\":\"5000\"
}" --connection-id connection-0 --from $WALLET_1 --chain-id test-1 --home ./data/test-1 --node tcp://localhost:16657 --keyring-backend test -y

# show that it's accepted on host chain, two records
icad q nameservice list-whois --chain-id test-2 --home ./data/test-2 --node tcp://localhost:26657


// Event sub
ws://localhost:26657/websocket
{
   "jsonrpc": "2.0",
   "method": "subscribe",
   "id": 0,
   "params": {
      "query":"tm.event = 'Tx'"
   }
}