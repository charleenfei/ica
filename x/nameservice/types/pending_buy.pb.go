// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: interchainaccounts/nameservice/pending_buy.proto

package types

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type PendingBuy struct {
	Index    string `protobuf:"bytes,1,opt,name=index,proto3" json:"index,omitempty"`
	Name     string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Value    string `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"`
	Price    string `protobuf:"bytes,4,opt,name=price,proto3" json:"price,omitempty"`
	Owner    string `protobuf:"bytes,5,opt,name=owner,proto3" json:"owner,omitempty"`
	Metadata string `protobuf:"bytes,6,opt,name=metadata,proto3" json:"metadata,omitempty"`
}

func (m *PendingBuy) Reset()         { *m = PendingBuy{} }
func (m *PendingBuy) String() string { return proto.CompactTextString(m) }
func (*PendingBuy) ProtoMessage()    {}
func (*PendingBuy) Descriptor() ([]byte, []int) {
	return fileDescriptor_c5b7097c98fcd2ad, []int{0}
}
func (m *PendingBuy) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PendingBuy) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PendingBuy.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PendingBuy) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PendingBuy.Merge(m, src)
}
func (m *PendingBuy) XXX_Size() int {
	return m.Size()
}
func (m *PendingBuy) XXX_DiscardUnknown() {
	xxx_messageInfo_PendingBuy.DiscardUnknown(m)
}

var xxx_messageInfo_PendingBuy proto.InternalMessageInfo

func (m *PendingBuy) GetIndex() string {
	if m != nil {
		return m.Index
	}
	return ""
}

func (m *PendingBuy) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *PendingBuy) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

func (m *PendingBuy) GetPrice() string {
	if m != nil {
		return m.Price
	}
	return ""
}

func (m *PendingBuy) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

func (m *PendingBuy) GetMetadata() string {
	if m != nil {
		return m.Metadata
	}
	return ""
}

func init() {
	proto.RegisterType((*PendingBuy)(nil), "cosmos.interchainaccounts.nameservice.PendingBuy")
}

func init() {
	proto.RegisterFile("interchainaccounts/nameservice/pending_buy.proto", fileDescriptor_c5b7097c98fcd2ad)
}

var fileDescriptor_c5b7097c98fcd2ad = []byte{
	// 245 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x64, 0x90, 0xbd, 0x4a, 0x04, 0x31,
	0x14, 0x85, 0x27, 0xba, 0xbb, 0x68, 0xca, 0x60, 0x11, 0x2c, 0x82, 0x08, 0x82, 0x8d, 0x33, 0x82,
	0x95, 0xed, 0x3e, 0x81, 0x68, 0x67, 0x23, 0x99, 0xcc, 0x65, 0x37, 0xe0, 0xdc, 0x84, 0xfc, 0xac,
	0x3b, 0x6f, 0x61, 0xe1, 0x43, 0x59, 0x6e, 0x69, 0x29, 0x33, 0x2f, 0x22, 0x49, 0x60, 0x55, 0xb6,
	0xcb, 0xf7, 0xe5, 0x9e, 0xe2, 0x1c, 0x7a, 0xab, 0x31, 0x80, 0x53, 0x6b, 0xa9, 0x51, 0x2a, 0x65,
	0x22, 0x06, 0xdf, 0xa0, 0xec, 0xc1, 0x83, 0xdb, 0x68, 0x05, 0x8d, 0x05, 0xec, 0x34, 0xae, 0x5e,
	0xda, 0x38, 0xd4, 0xd6, 0x99, 0x60, 0xd8, 0x95, 0x32, 0xbe, 0x37, 0xbe, 0x3e, 0x0c, 0xd6, 0x7f,
	0x82, 0x97, 0x1f, 0x84, 0xd2, 0x87, 0x12, 0x5e, 0xc6, 0x81, 0x9d, 0xd1, 0xb9, 0xc6, 0x0e, 0xb6,
	0x9c, 0x5c, 0x90, 0xeb, 0xd3, 0xc7, 0x02, 0x8c, 0xd1, 0x59, 0xca, 0xf0, 0xa3, 0x2c, 0xf3, 0x3b,
	0x5d, 0x6e, 0xe4, 0x6b, 0x04, 0x7e, 0x5c, 0x2e, 0x33, 0x24, 0x6b, 0x9d, 0x56, 0xc0, 0x67, 0xc5,
	0x66, 0x48, 0xd6, 0xbc, 0x21, 0x38, 0x3e, 0x2f, 0x36, 0x03, 0x3b, 0xa7, 0x27, 0x3d, 0x04, 0xd9,
	0xc9, 0x20, 0xf9, 0x22, 0x7f, 0xec, 0x79, 0xf9, 0xf4, 0x39, 0x0a, 0xb2, 0x1b, 0x05, 0xf9, 0x1e,
	0x05, 0x79, 0x9f, 0x44, 0xb5, 0x9b, 0x44, 0xf5, 0x35, 0x89, 0xea, 0xf9, 0x7e, 0xa5, 0xc3, 0x3a,
	0xb6, 0xb5, 0x32, 0x7d, 0x53, 0x2a, 0x36, 0xbf, 0x15, 0x6f, 0xf6, 0xe3, 0x6c, 0xff, 0xcd, 0x13,
	0x06, 0x0b, 0xbe, 0x5d, 0xe4, 0x65, 0xee, 0x7e, 0x02, 0x00, 0x00, 0xff, 0xff, 0x47, 0xbb, 0x70,
	0xa5, 0x4d, 0x01, 0x00, 0x00,
}

func (m *PendingBuy) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PendingBuy) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PendingBuy) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Metadata) > 0 {
		i -= len(m.Metadata)
		copy(dAtA[i:], m.Metadata)
		i = encodeVarintPendingBuy(dAtA, i, uint64(len(m.Metadata)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintPendingBuy(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Price) > 0 {
		i -= len(m.Price)
		copy(dAtA[i:], m.Price)
		i = encodeVarintPendingBuy(dAtA, i, uint64(len(m.Price)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Value) > 0 {
		i -= len(m.Value)
		copy(dAtA[i:], m.Value)
		i = encodeVarintPendingBuy(dAtA, i, uint64(len(m.Value)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintPendingBuy(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Index) > 0 {
		i -= len(m.Index)
		copy(dAtA[i:], m.Index)
		i = encodeVarintPendingBuy(dAtA, i, uint64(len(m.Index)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintPendingBuy(dAtA []byte, offset int, v uint64) int {
	offset -= sovPendingBuy(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *PendingBuy) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Index)
	if l > 0 {
		n += 1 + l + sovPendingBuy(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovPendingBuy(uint64(l))
	}
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovPendingBuy(uint64(l))
	}
	l = len(m.Price)
	if l > 0 {
		n += 1 + l + sovPendingBuy(uint64(l))
	}
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovPendingBuy(uint64(l))
	}
	l = len(m.Metadata)
	if l > 0 {
		n += 1 + l + sovPendingBuy(uint64(l))
	}
	return n
}

func sovPendingBuy(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozPendingBuy(x uint64) (n int) {
	return sovPendingBuy(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *PendingBuy) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPendingBuy
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PendingBuy: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PendingBuy: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPendingBuy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPendingBuy
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPendingBuy
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Index = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPendingBuy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPendingBuy
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPendingBuy
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPendingBuy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPendingBuy
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPendingBuy
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Price", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPendingBuy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPendingBuy
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPendingBuy
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Price = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPendingBuy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPendingBuy
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPendingBuy
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metadata", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPendingBuy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPendingBuy
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPendingBuy
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Metadata = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPendingBuy(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPendingBuy
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPendingBuy(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPendingBuy
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPendingBuy
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPendingBuy
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthPendingBuy
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupPendingBuy
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthPendingBuy
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthPendingBuy        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPendingBuy          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupPendingBuy = fmt.Errorf("proto: unexpected end of group")
)
