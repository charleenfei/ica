// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: interchainaccounts/controller/query.proto

package types

import (
	context "context"
	fmt "fmt"
	query "github.com/cosmos/cosmos-sdk/types/query"
	_ "github.com/gogo/protobuf/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// QueryParamsRequest is request type for the Query/Params RPC method.
type QueryParamsRequest struct {
}

func (m *QueryParamsRequest) Reset()         { *m = QueryParamsRequest{} }
func (m *QueryParamsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryParamsRequest) ProtoMessage()    {}
func (*QueryParamsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ba3663865de3fd85, []int{0}
}
func (m *QueryParamsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsRequest.Merge(m, src)
}
func (m *QueryParamsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsRequest proto.InternalMessageInfo

// QueryParamsResponse is response type for the Query/Params RPC method.
type QueryParamsResponse struct {
	// params holds all the parameters of this module.
	Params Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
}

func (m *QueryParamsResponse) Reset()         { *m = QueryParamsResponse{} }
func (m *QueryParamsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryParamsResponse) ProtoMessage()    {}
func (*QueryParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ba3663865de3fd85, []int{1}
}
func (m *QueryParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsResponse.Merge(m, src)
}
func (m *QueryParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsResponse proto.InternalMessageInfo

func (m *QueryParamsResponse) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

type QueryGetCmpDataRequest struct {
	Index string `protobuf:"bytes,1,opt,name=index,proto3" json:"index,omitempty"`
}

func (m *QueryGetCmpDataRequest) Reset()         { *m = QueryGetCmpDataRequest{} }
func (m *QueryGetCmpDataRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetCmpDataRequest) ProtoMessage()    {}
func (*QueryGetCmpDataRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ba3663865de3fd85, []int{2}
}
func (m *QueryGetCmpDataRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetCmpDataRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetCmpDataRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetCmpDataRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetCmpDataRequest.Merge(m, src)
}
func (m *QueryGetCmpDataRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetCmpDataRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetCmpDataRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetCmpDataRequest proto.InternalMessageInfo

func (m *QueryGetCmpDataRequest) GetIndex() string {
	if m != nil {
		return m.Index
	}
	return ""
}

type QueryGetCmpDataResponse struct {
	CmpData CmpData `protobuf:"bytes,1,opt,name=cmpData,proto3" json:"cmpData"`
}

func (m *QueryGetCmpDataResponse) Reset()         { *m = QueryGetCmpDataResponse{} }
func (m *QueryGetCmpDataResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetCmpDataResponse) ProtoMessage()    {}
func (*QueryGetCmpDataResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ba3663865de3fd85, []int{3}
}
func (m *QueryGetCmpDataResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetCmpDataResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetCmpDataResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetCmpDataResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetCmpDataResponse.Merge(m, src)
}
func (m *QueryGetCmpDataResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetCmpDataResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetCmpDataResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetCmpDataResponse proto.InternalMessageInfo

func (m *QueryGetCmpDataResponse) GetCmpData() CmpData {
	if m != nil {
		return m.CmpData
	}
	return CmpData{}
}

type QueryAllCmpDataRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllCmpDataRequest) Reset()         { *m = QueryAllCmpDataRequest{} }
func (m *QueryAllCmpDataRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllCmpDataRequest) ProtoMessage()    {}
func (*QueryAllCmpDataRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ba3663865de3fd85, []int{4}
}
func (m *QueryAllCmpDataRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllCmpDataRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllCmpDataRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllCmpDataRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllCmpDataRequest.Merge(m, src)
}
func (m *QueryAllCmpDataRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllCmpDataRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllCmpDataRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllCmpDataRequest proto.InternalMessageInfo

func (m *QueryAllCmpDataRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllCmpDataResponse struct {
	CmpData    []CmpData           `protobuf:"bytes,1,rep,name=cmpData,proto3" json:"cmpData"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllCmpDataResponse) Reset()         { *m = QueryAllCmpDataResponse{} }
func (m *QueryAllCmpDataResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllCmpDataResponse) ProtoMessage()    {}
func (*QueryAllCmpDataResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ba3663865de3fd85, []int{5}
}
func (m *QueryAllCmpDataResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllCmpDataResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllCmpDataResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllCmpDataResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllCmpDataResponse.Merge(m, src)
}
func (m *QueryAllCmpDataResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllCmpDataResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllCmpDataResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllCmpDataResponse proto.InternalMessageInfo

func (m *QueryAllCmpDataResponse) GetCmpData() []CmpData {
	if m != nil {
		return m.CmpData
	}
	return nil
}

func (m *QueryAllCmpDataResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetCmpControllerRequestRequest struct {
	Index string `protobuf:"bytes,1,opt,name=index,proto3" json:"index,omitempty"`
}

func (m *QueryGetCmpControllerRequestRequest) Reset()         { *m = QueryGetCmpControllerRequestRequest{} }
func (m *QueryGetCmpControllerRequestRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetCmpControllerRequestRequest) ProtoMessage()    {}
func (*QueryGetCmpControllerRequestRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ba3663865de3fd85, []int{6}
}
func (m *QueryGetCmpControllerRequestRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetCmpControllerRequestRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetCmpControllerRequestRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetCmpControllerRequestRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetCmpControllerRequestRequest.Merge(m, src)
}
func (m *QueryGetCmpControllerRequestRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetCmpControllerRequestRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetCmpControllerRequestRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetCmpControllerRequestRequest proto.InternalMessageInfo

func (m *QueryGetCmpControllerRequestRequest) GetIndex() string {
	if m != nil {
		return m.Index
	}
	return ""
}

type QueryGetCmpControllerRequestResponse struct {
	CmpControllerRequest CmpControllerRequest `protobuf:"bytes,1,opt,name=cmpControllerRequest,proto3" json:"cmpControllerRequest"`
}

func (m *QueryGetCmpControllerRequestResponse) Reset()         { *m = QueryGetCmpControllerRequestResponse{} }
func (m *QueryGetCmpControllerRequestResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetCmpControllerRequestResponse) ProtoMessage()    {}
func (*QueryGetCmpControllerRequestResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ba3663865de3fd85, []int{7}
}
func (m *QueryGetCmpControllerRequestResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetCmpControllerRequestResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetCmpControllerRequestResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetCmpControllerRequestResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetCmpControllerRequestResponse.Merge(m, src)
}
func (m *QueryGetCmpControllerRequestResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetCmpControllerRequestResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetCmpControllerRequestResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetCmpControllerRequestResponse proto.InternalMessageInfo

func (m *QueryGetCmpControllerRequestResponse) GetCmpControllerRequest() CmpControllerRequest {
	if m != nil {
		return m.CmpControllerRequest
	}
	return CmpControllerRequest{}
}

type QueryAllCmpControllerRequestRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllCmpControllerRequestRequest) Reset()         { *m = QueryAllCmpControllerRequestRequest{} }
func (m *QueryAllCmpControllerRequestRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllCmpControllerRequestRequest) ProtoMessage()    {}
func (*QueryAllCmpControllerRequestRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ba3663865de3fd85, []int{8}
}
func (m *QueryAllCmpControllerRequestRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllCmpControllerRequestRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllCmpControllerRequestRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllCmpControllerRequestRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllCmpControllerRequestRequest.Merge(m, src)
}
func (m *QueryAllCmpControllerRequestRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllCmpControllerRequestRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllCmpControllerRequestRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllCmpControllerRequestRequest proto.InternalMessageInfo

func (m *QueryAllCmpControllerRequestRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllCmpControllerRequestResponse struct {
	CmpControllerRequest []CmpControllerRequest `protobuf:"bytes,1,rep,name=cmpControllerRequest,proto3" json:"cmpControllerRequest"`
	Pagination           *query.PageResponse    `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllCmpControllerRequestResponse) Reset()         { *m = QueryAllCmpControllerRequestResponse{} }
func (m *QueryAllCmpControllerRequestResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllCmpControllerRequestResponse) ProtoMessage()    {}
func (*QueryAllCmpControllerRequestResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ba3663865de3fd85, []int{9}
}
func (m *QueryAllCmpControllerRequestResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllCmpControllerRequestResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllCmpControllerRequestResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllCmpControllerRequestResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllCmpControllerRequestResponse.Merge(m, src)
}
func (m *QueryAllCmpControllerRequestResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllCmpControllerRequestResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllCmpControllerRequestResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllCmpControllerRequestResponse proto.InternalMessageInfo

func (m *QueryAllCmpControllerRequestResponse) GetCmpControllerRequest() []CmpControllerRequest {
	if m != nil {
		return m.CmpControllerRequest
	}
	return nil
}

func (m *QueryAllCmpControllerRequestResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetCmpControllerResultRequest struct {
	Index string `protobuf:"bytes,1,opt,name=index,proto3" json:"index,omitempty"`
}

func (m *QueryGetCmpControllerResultRequest) Reset()         { *m = QueryGetCmpControllerResultRequest{} }
func (m *QueryGetCmpControllerResultRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetCmpControllerResultRequest) ProtoMessage()    {}
func (*QueryGetCmpControllerResultRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ba3663865de3fd85, []int{10}
}
func (m *QueryGetCmpControllerResultRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetCmpControllerResultRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetCmpControllerResultRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetCmpControllerResultRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetCmpControllerResultRequest.Merge(m, src)
}
func (m *QueryGetCmpControllerResultRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetCmpControllerResultRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetCmpControllerResultRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetCmpControllerResultRequest proto.InternalMessageInfo

func (m *QueryGetCmpControllerResultRequest) GetIndex() string {
	if m != nil {
		return m.Index
	}
	return ""
}

type QueryGetCmpControllerResultResponse struct {
	CmpControllerResult CmpControllerResult `protobuf:"bytes,1,opt,name=cmpControllerResult,proto3" json:"cmpControllerResult"`
}

func (m *QueryGetCmpControllerResultResponse) Reset()         { *m = QueryGetCmpControllerResultResponse{} }
func (m *QueryGetCmpControllerResultResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetCmpControllerResultResponse) ProtoMessage()    {}
func (*QueryGetCmpControllerResultResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ba3663865de3fd85, []int{11}
}
func (m *QueryGetCmpControllerResultResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetCmpControllerResultResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetCmpControllerResultResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetCmpControllerResultResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetCmpControllerResultResponse.Merge(m, src)
}
func (m *QueryGetCmpControllerResultResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetCmpControllerResultResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetCmpControllerResultResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetCmpControllerResultResponse proto.InternalMessageInfo

func (m *QueryGetCmpControllerResultResponse) GetCmpControllerResult() CmpControllerResult {
	if m != nil {
		return m.CmpControllerResult
	}
	return CmpControllerResult{}
}

type QueryAllCmpControllerResultRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllCmpControllerResultRequest) Reset()         { *m = QueryAllCmpControllerResultRequest{} }
func (m *QueryAllCmpControllerResultRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllCmpControllerResultRequest) ProtoMessage()    {}
func (*QueryAllCmpControllerResultRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ba3663865de3fd85, []int{12}
}
func (m *QueryAllCmpControllerResultRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllCmpControllerResultRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllCmpControllerResultRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllCmpControllerResultRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllCmpControllerResultRequest.Merge(m, src)
}
func (m *QueryAllCmpControllerResultRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllCmpControllerResultRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllCmpControllerResultRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllCmpControllerResultRequest proto.InternalMessageInfo

func (m *QueryAllCmpControllerResultRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllCmpControllerResultResponse struct {
	CmpControllerResult []CmpControllerResult `protobuf:"bytes,1,rep,name=cmpControllerResult,proto3" json:"cmpControllerResult"`
	Pagination          *query.PageResponse   `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllCmpControllerResultResponse) Reset()         { *m = QueryAllCmpControllerResultResponse{} }
func (m *QueryAllCmpControllerResultResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllCmpControllerResultResponse) ProtoMessage()    {}
func (*QueryAllCmpControllerResultResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ba3663865de3fd85, []int{13}
}
func (m *QueryAllCmpControllerResultResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllCmpControllerResultResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllCmpControllerResultResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllCmpControllerResultResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllCmpControllerResultResponse.Merge(m, src)
}
func (m *QueryAllCmpControllerResultResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllCmpControllerResultResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllCmpControllerResultResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllCmpControllerResultResponse proto.InternalMessageInfo

func (m *QueryAllCmpControllerResultResponse) GetCmpControllerResult() []CmpControllerResult {
	if m != nil {
		return m.CmpControllerResult
	}
	return nil
}

func (m *QueryAllCmpControllerResultResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

func init() {
	proto.RegisterType((*QueryParamsRequest)(nil), "cosmos.interchainaccounts.controller.QueryParamsRequest")
	proto.RegisterType((*QueryParamsResponse)(nil), "cosmos.interchainaccounts.controller.QueryParamsResponse")
	proto.RegisterType((*QueryGetCmpDataRequest)(nil), "cosmos.interchainaccounts.controller.QueryGetCmpDataRequest")
	proto.RegisterType((*QueryGetCmpDataResponse)(nil), "cosmos.interchainaccounts.controller.QueryGetCmpDataResponse")
	proto.RegisterType((*QueryAllCmpDataRequest)(nil), "cosmos.interchainaccounts.controller.QueryAllCmpDataRequest")
	proto.RegisterType((*QueryAllCmpDataResponse)(nil), "cosmos.interchainaccounts.controller.QueryAllCmpDataResponse")
	proto.RegisterType((*QueryGetCmpControllerRequestRequest)(nil), "cosmos.interchainaccounts.controller.QueryGetCmpControllerRequestRequest")
	proto.RegisterType((*QueryGetCmpControllerRequestResponse)(nil), "cosmos.interchainaccounts.controller.QueryGetCmpControllerRequestResponse")
	proto.RegisterType((*QueryAllCmpControllerRequestRequest)(nil), "cosmos.interchainaccounts.controller.QueryAllCmpControllerRequestRequest")
	proto.RegisterType((*QueryAllCmpControllerRequestResponse)(nil), "cosmos.interchainaccounts.controller.QueryAllCmpControllerRequestResponse")
	proto.RegisterType((*QueryGetCmpControllerResultRequest)(nil), "cosmos.interchainaccounts.controller.QueryGetCmpControllerResultRequest")
	proto.RegisterType((*QueryGetCmpControllerResultResponse)(nil), "cosmos.interchainaccounts.controller.QueryGetCmpControllerResultResponse")
	proto.RegisterType((*QueryAllCmpControllerResultRequest)(nil), "cosmos.interchainaccounts.controller.QueryAllCmpControllerResultRequest")
	proto.RegisterType((*QueryAllCmpControllerResultResponse)(nil), "cosmos.interchainaccounts.controller.QueryAllCmpControllerResultResponse")
}

func init() {
	proto.RegisterFile("interchainaccounts/controller/query.proto", fileDescriptor_ba3663865de3fd85)
}

var fileDescriptor_ba3663865de3fd85 = []byte{
	// 784 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x57, 0xcb, 0x4f, 0x13, 0x41,
	0x18, 0xef, 0x80, 0x40, 0x1c, 0x3d, 0x0d, 0x0d, 0x98, 0xc6, 0x54, 0xb3, 0x12, 0x5f, 0x81, 0xdd,
	0x80, 0x31, 0x50, 0x04, 0x09, 0xef, 0x47, 0x24, 0xc1, 0x1e, 0xbd, 0xe0, 0x74, 0xd9, 0x94, 0x4d,
	0xb6, 0x3b, 0xcb, 0xee, 0xd4, 0x40, 0x8c, 0x17, 0xff, 0x02, 0x13, 0x2f, 0x1e, 0xfc, 0x27, 0x4c,
	0x4c, 0xbc, 0x7b, 0x91, 0x23, 0x89, 0x17, 0x4f, 0x46, 0x41, 0xff, 0x02, 0x0f, 0x7a, 0xf0, 0x60,
	0x76, 0xe6, 0x5b, 0x5a, 0xdc, 0x47, 0xbb, 0xed, 0x72, 0xa3, 0xdd, 0xf9, 0x7e, 0xdf, 0xef, 0xf1,
	0x31, 0xdf, 0x16, 0xdf, 0x31, 0x6d, 0x6e, 0xb8, 0xfa, 0x2e, 0x35, 0x6d, 0xaa, 0xeb, 0xac, 0x6e,
	0x73, 0x4f, 0xd3, 0x99, 0xcd, 0x5d, 0x66, 0x59, 0x86, 0xab, 0xed, 0xd5, 0x0d, 0xf7, 0x40, 0x75,
	0x5c, 0xc6, 0x19, 0x19, 0xd1, 0x99, 0x57, 0x63, 0x9e, 0x1a, 0xae, 0x50, 0x1b, 0x15, 0x85, 0x7c,
	0x95, 0x55, 0x99, 0x28, 0xd0, 0xfc, 0xbf, 0x64, 0x6d, 0xe1, 0x6a, 0x95, 0xb1, 0xaa, 0x65, 0x68,
	0xd4, 0x31, 0x35, 0x6a, 0xdb, 0x8c, 0x53, 0x6e, 0x32, 0xdb, 0x83, 0xa7, 0x77, 0x25, 0xb2, 0x56,
	0xa1, 0x9e, 0x21, 0x5b, 0x6a, 0xcf, 0xc6, 0x2b, 0x06, 0xa7, 0xe3, 0x9a, 0x43, 0xab, 0xa6, 0x2d,
	0x0e, 0x07, 0x67, 0x93, 0x09, 0x3b, 0xd4, 0xa5, 0xb5, 0x00, 0x77, 0x34, 0xf9, 0xac, 0x5e, 0x73,
	0xb6, 0x77, 0x28, 0xa7, 0x70, 0x7a, 0xba, 0xf5, 0xe9, 0xc6, 0xc7, 0x6d, 0xd7, 0xd8, 0xab, 0x1b,
	0x1e, 0x87, 0xda, 0x52, 0xca, 0x5a, 0xaf, 0x6e, 0x41, 0xa9, 0x92, 0xc7, 0xe4, 0xb1, 0x2f, 0x79,
	0x4b, 0x30, 0x2f, 0x4b, 0x58, 0x85, 0xe2, 0xc1, 0x33, 0xdf, 0x7a, 0x0e, 0xb3, 0x3d, 0x83, 0x6c,
	0xe0, 0x7e, 0xa9, 0xf0, 0x0a, 0xba, 0x8e, 0x6e, 0x5f, 0x9a, 0x18, 0x55, 0xdb, 0x09, 0x45, 0x95,
	0x28, 0x0b, 0x17, 0x0e, 0xbf, 0x5e, 0xcb, 0x95, 0x01, 0x41, 0x51, 0xf1, 0x90, 0x68, 0xb1, 0x6a,
	0xf0, 0xc5, 0x9a, 0xb3, 0x44, 0x39, 0x85, 0xe6, 0x24, 0x8f, 0xfb, 0x4c, 0x7b, 0xc7, 0xd8, 0x17,
	0x4d, 0x2e, 0x96, 0xe5, 0x07, 0x65, 0x17, 0x0f, 0x87, 0xce, 0x03, 0xad, 0x4d, 0x3c, 0xa0, 0xcb,
	0xaf, 0x80, 0xd7, 0x58, 0x7b, 0xbc, 0x00, 0x07, 0x88, 0x05, 0x18, 0xca, 0x53, 0x60, 0x36, 0x6f,
	0x59, 0xff, 0x31, 0x5b, 0xc1, 0xb8, 0x31, 0x11, 0xd0, 0xeb, 0x66, 0xd0, 0xcb, 0x1f, 0x1f, 0x55,
	0x4e, 0x2c, 0x8c, 0x8f, 0xba, 0x45, 0xab, 0x06, 0xd4, 0x96, 0x9b, 0x2a, 0x95, 0x77, 0x08, 0xc4,
	0x34, 0xb7, 0x88, 0x12, 0xd3, 0xdb, 0xad, 0x18, 0xb2, 0x7a, 0x86, 0x72, 0x8f, 0xa0, 0x7c, 0xab,
	0x25, 0x65, 0xc9, 0xe5, 0x0c, 0xe7, 0x07, 0xf8, 0x46, 0x93, 0xff, 0x8b, 0xa7, 0x8d, 0x03, 0x7d,
	0x89, 0xe1, 0xbd, 0x45, 0x78, 0x24, 0xb9, 0x1a, 0xd4, 0x73, 0x9c, 0xd7, 0x23, 0x9e, 0x83, 0xd7,
	0xd3, 0x6d, 0x5b, 0x11, 0x42, 0x00, 0x5f, 0x22, 0xd1, 0x95, 0x1a, 0x68, 0x93, 0x71, 0xc4, 0x6a,
	0xcb, 0x2a, 0xfe, 0x9f, 0x81, 0x1b, 0xb1, 0xfd, 0x5a, 0xba, 0xd1, 0x7b, 0x7e, 0x6e, 0x64, 0x37,
	0x32, 0xd3, 0x58, 0x89, 0x09, 0xdd, 0xbf, 0x80, 0x92, 0x27, 0xe6, 0x0d, 0x8a, 0x9d, 0x37, 0x59,
	0x0c, 0x16, 0xed, 0xe1, 0x41, 0x3d, 0xfc, 0x18, 0xc2, 0x29, 0x75, 0xe4, 0x90, 0x0f, 0x00, 0x06,
	0x45, 0x61, 0x2b, 0x16, 0xc8, 0x0a, 0xa7, 0xd7, 0x2c, 0x2b, 0xab, 0x61, 0xf9, 0x8e, 0x62, 0x87,
	0xb3, 0x3d, 0x23, 0x7a, 0xcf, 0xcb, 0x88, 0xcc, 0x06, 0x65, 0xe2, 0xc3, 0x65, 0xdc, 0x27, 0x34,
	0x92, 0xf7, 0x08, 0xf7, 0xcb, 0x75, 0x41, 0xa6, 0xda, 0xe3, 0x1c, 0xde, 0x5e, 0x85, 0x52, 0x07,
	0x95, 0x92, 0x95, 0x72, 0xff, 0xe5, 0xe7, 0x1f, 0xaf, 0x7b, 0x34, 0x32, 0xa6, 0xc1, 0x4b, 0x41,
	0x03, 0x62, 0x2c, 0x7e, 0xe1, 0x93, 0x4f, 0x08, 0x0f, 0xc0, 0x05, 0x4c, 0x66, 0x52, 0x74, 0x0f,
	0x2d, 0xbf, 0xc2, 0x6c, 0x87, 0xd5, 0xc0, 0x7f, 0x4e, 0xf0, 0x2f, 0x91, 0xc9, 0x36, 0xf9, 0x07,
	0x2f, 0x21, 0xda, 0x73, 0xf1, 0x6f, 0xf7, 0x82, 0x7c, 0x44, 0x18, 0x03, 0xe8, 0xbc, 0x65, 0xa5,
	0x12, 0x13, 0xda, 0x97, 0xa9, 0xc4, 0x84, 0x57, 0xa1, 0x32, 0x29, 0xc4, 0x8c, 0x13, 0x2d, 0xa5,
	0x18, 0xf2, 0x17, 0xe1, 0x7c, 0xd4, 0xb5, 0x47, 0xd6, 0x53, 0xbb, 0x1b, 0xb7, 0x0c, 0x0a, 0x1b,
	0x59, 0x40, 0x81, 0xd0, 0x4d, 0x21, 0x74, 0x95, 0x2c, 0xa7, 0x10, 0x1a, 0x7e, 0x19, 0x3c, 0xcd,
	0xf0, 0x37, 0xc2, 0xc3, 0x51, 0xfd, 0xfc, 0x40, 0xd7, 0x53, 0x47, 0x92, 0x89, 0x03, 0x2d, 0x36,
	0x9d, 0xb2, 0x2c, 0x1c, 0x98, 0x23, 0xb3, 0x5d, 0x39, 0x40, 0xfe, 0x20, 0x3c, 0x18, 0x71, 0x89,
	0x91, 0xb5, 0xae, 0xc2, 0x6a, 0xba, 0xd6, 0x0b, 0xeb, 0x19, 0x20, 0x81, 0xe6, 0x47, 0x42, 0xf3,
	0x0a, 0x59, 0xea, 0x54, 0xb3, 0x8f, 0x76, 0x1a, 0xfa, 0x2f, 0x84, 0x87, 0x22, 0xba, 0xf9, 0x99,
	0xaf, 0x75, 0x15, 0x54, 0xa7, 0xea, 0x93, 0xf7, 0x95, 0xb2, 0x24, 0xd4, 0x3f, 0x24, 0x33, 0xdd,
	0xa8, 0x5f, 0x28, 0x1f, 0x1e, 0x17, 0xd1, 0xd1, 0x71, 0x11, 0x7d, 0x3b, 0x2e, 0xa2, 0x57, 0x27,
	0xc5, 0xdc, 0xd1, 0x49, 0x31, 0xf7, 0xe5, 0xa4, 0x98, 0x7b, 0x32, 0x55, 0x35, 0xf9, 0x6e, 0xbd,
	0xa2, 0xea, 0xac, 0x96, 0xd4, 0x61, 0xbf, 0xb9, 0x07, 0x3f, 0x70, 0x0c, 0xaf, 0xd2, 0x2f, 0x7e,
	0x19, 0xdd, 0xfb, 0x17, 0x00, 0x00, 0xff, 0xff, 0xbb, 0x19, 0xac, 0xda, 0x9d, 0x0e, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// Parameters queries the parameters of the module.
	Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
	// Queries a CmpData by index.
	CmpData(ctx context.Context, in *QueryGetCmpDataRequest, opts ...grpc.CallOption) (*QueryGetCmpDataResponse, error)
	// Queries a list of CmpData items.
	CmpDataAll(ctx context.Context, in *QueryAllCmpDataRequest, opts ...grpc.CallOption) (*QueryAllCmpDataResponse, error)
	// Queries a CmpControllerRequest by index.
	CmpControllerRequest(ctx context.Context, in *QueryGetCmpControllerRequestRequest, opts ...grpc.CallOption) (*QueryGetCmpControllerRequestResponse, error)
	// Queries a list of CmpControllerRequest items.
	CmpControllerRequestAll(ctx context.Context, in *QueryAllCmpControllerRequestRequest, opts ...grpc.CallOption) (*QueryAllCmpControllerRequestResponse, error)
	// Queries a CmpControllerResult by index.
	CmpControllerResult(ctx context.Context, in *QueryGetCmpControllerResultRequest, opts ...grpc.CallOption) (*QueryGetCmpControllerResultResponse, error)
	// Queries a list of CmpControllerResult items.
	CmpControllerResultAll(ctx context.Context, in *QueryAllCmpControllerResultRequest, opts ...grpc.CallOption) (*QueryAllCmpControllerResultResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, "/cosmos.interchainaccounts.controller.Query/Params", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) CmpData(ctx context.Context, in *QueryGetCmpDataRequest, opts ...grpc.CallOption) (*QueryGetCmpDataResponse, error) {
	out := new(QueryGetCmpDataResponse)
	err := c.cc.Invoke(ctx, "/cosmos.interchainaccounts.controller.Query/CmpData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) CmpDataAll(ctx context.Context, in *QueryAllCmpDataRequest, opts ...grpc.CallOption) (*QueryAllCmpDataResponse, error) {
	out := new(QueryAllCmpDataResponse)
	err := c.cc.Invoke(ctx, "/cosmos.interchainaccounts.controller.Query/CmpDataAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) CmpControllerRequest(ctx context.Context, in *QueryGetCmpControllerRequestRequest, opts ...grpc.CallOption) (*QueryGetCmpControllerRequestResponse, error) {
	out := new(QueryGetCmpControllerRequestResponse)
	err := c.cc.Invoke(ctx, "/cosmos.interchainaccounts.controller.Query/CmpControllerRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) CmpControllerRequestAll(ctx context.Context, in *QueryAllCmpControllerRequestRequest, opts ...grpc.CallOption) (*QueryAllCmpControllerRequestResponse, error) {
	out := new(QueryAllCmpControllerRequestResponse)
	err := c.cc.Invoke(ctx, "/cosmos.interchainaccounts.controller.Query/CmpControllerRequestAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) CmpControllerResult(ctx context.Context, in *QueryGetCmpControllerResultRequest, opts ...grpc.CallOption) (*QueryGetCmpControllerResultResponse, error) {
	out := new(QueryGetCmpControllerResultResponse)
	err := c.cc.Invoke(ctx, "/cosmos.interchainaccounts.controller.Query/CmpControllerResult", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) CmpControllerResultAll(ctx context.Context, in *QueryAllCmpControllerResultRequest, opts ...grpc.CallOption) (*QueryAllCmpControllerResultResponse, error) {
	out := new(QueryAllCmpControllerResultResponse)
	err := c.cc.Invoke(ctx, "/cosmos.interchainaccounts.controller.Query/CmpControllerResultAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// Parameters queries the parameters of the module.
	Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
	// Queries a CmpData by index.
	CmpData(context.Context, *QueryGetCmpDataRequest) (*QueryGetCmpDataResponse, error)
	// Queries a list of CmpData items.
	CmpDataAll(context.Context, *QueryAllCmpDataRequest) (*QueryAllCmpDataResponse, error)
	// Queries a CmpControllerRequest by index.
	CmpControllerRequest(context.Context, *QueryGetCmpControllerRequestRequest) (*QueryGetCmpControllerRequestResponse, error)
	// Queries a list of CmpControllerRequest items.
	CmpControllerRequestAll(context.Context, *QueryAllCmpControllerRequestRequest) (*QueryAllCmpControllerRequestResponse, error)
	// Queries a CmpControllerResult by index.
	CmpControllerResult(context.Context, *QueryGetCmpControllerResultRequest) (*QueryGetCmpControllerResultResponse, error)
	// Queries a list of CmpControllerResult items.
	CmpControllerResultAll(context.Context, *QueryAllCmpControllerResultRequest) (*QueryAllCmpControllerResultResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) Params(ctx context.Context, req *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}
func (*UnimplementedQueryServer) CmpData(ctx context.Context, req *QueryGetCmpDataRequest) (*QueryGetCmpDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CmpData not implemented")
}
func (*UnimplementedQueryServer) CmpDataAll(ctx context.Context, req *QueryAllCmpDataRequest) (*QueryAllCmpDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CmpDataAll not implemented")
}
func (*UnimplementedQueryServer) CmpControllerRequest(ctx context.Context, req *QueryGetCmpControllerRequestRequest) (*QueryGetCmpControllerRequestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CmpControllerRequest not implemented")
}
func (*UnimplementedQueryServer) CmpControllerRequestAll(ctx context.Context, req *QueryAllCmpControllerRequestRequest) (*QueryAllCmpControllerRequestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CmpControllerRequestAll not implemented")
}
func (*UnimplementedQueryServer) CmpControllerResult(ctx context.Context, req *QueryGetCmpControllerResultRequest) (*QueryGetCmpControllerResultResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CmpControllerResult not implemented")
}
func (*UnimplementedQueryServer) CmpControllerResultAll(ctx context.Context, req *QueryAllCmpControllerResultRequest) (*QueryAllCmpControllerResultResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CmpControllerResultAll not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cosmos.interchainaccounts.controller.Query/Params",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_CmpData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetCmpDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).CmpData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cosmos.interchainaccounts.controller.Query/CmpData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).CmpData(ctx, req.(*QueryGetCmpDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_CmpDataAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllCmpDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).CmpDataAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cosmos.interchainaccounts.controller.Query/CmpDataAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).CmpDataAll(ctx, req.(*QueryAllCmpDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_CmpControllerRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetCmpControllerRequestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).CmpControllerRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cosmos.interchainaccounts.controller.Query/CmpControllerRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).CmpControllerRequest(ctx, req.(*QueryGetCmpControllerRequestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_CmpControllerRequestAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllCmpControllerRequestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).CmpControllerRequestAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cosmos.interchainaccounts.controller.Query/CmpControllerRequestAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).CmpControllerRequestAll(ctx, req.(*QueryAllCmpControllerRequestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_CmpControllerResult_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetCmpControllerResultRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).CmpControllerResult(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cosmos.interchainaccounts.controller.Query/CmpControllerResult",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).CmpControllerResult(ctx, req.(*QueryGetCmpControllerResultRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_CmpControllerResultAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllCmpControllerResultRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).CmpControllerResultAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cosmos.interchainaccounts.controller.Query/CmpControllerResultAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).CmpControllerResultAll(ctx, req.(*QueryAllCmpControllerResultRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "cosmos.interchainaccounts.controller.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
		{
			MethodName: "CmpData",
			Handler:    _Query_CmpData_Handler,
		},
		{
			MethodName: "CmpDataAll",
			Handler:    _Query_CmpDataAll_Handler,
		},
		{
			MethodName: "CmpControllerRequest",
			Handler:    _Query_CmpControllerRequest_Handler,
		},
		{
			MethodName: "CmpControllerRequestAll",
			Handler:    _Query_CmpControllerRequestAll_Handler,
		},
		{
			MethodName: "CmpControllerResult",
			Handler:    _Query_CmpControllerResult_Handler,
		},
		{
			MethodName: "CmpControllerResultAll",
			Handler:    _Query_CmpControllerResultAll_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "interchainaccounts/controller/query.proto",
}

func (m *QueryParamsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryGetCmpDataRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetCmpDataRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetCmpDataRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Index) > 0 {
		i -= len(m.Index)
		copy(dAtA[i:], m.Index)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Index)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetCmpDataResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetCmpDataResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetCmpDataResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.CmpData.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllCmpDataRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllCmpDataRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllCmpDataRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllCmpDataResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllCmpDataResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllCmpDataResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.CmpData) > 0 {
		for iNdEx := len(m.CmpData) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.CmpData[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetCmpControllerRequestRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetCmpControllerRequestRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetCmpControllerRequestRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Index) > 0 {
		i -= len(m.Index)
		copy(dAtA[i:], m.Index)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Index)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetCmpControllerRequestResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetCmpControllerRequestResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetCmpControllerRequestResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.CmpControllerRequest.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllCmpControllerRequestRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllCmpControllerRequestRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllCmpControllerRequestRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllCmpControllerRequestResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllCmpControllerRequestResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllCmpControllerRequestResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.CmpControllerRequest) > 0 {
		for iNdEx := len(m.CmpControllerRequest) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.CmpControllerRequest[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetCmpControllerResultRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetCmpControllerResultRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetCmpControllerResultRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Index) > 0 {
		i -= len(m.Index)
		copy(dAtA[i:], m.Index)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Index)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetCmpControllerResultResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetCmpControllerResultResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetCmpControllerResultResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.CmpControllerResult.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllCmpControllerResultRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllCmpControllerResultRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllCmpControllerResultRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllCmpControllerResultResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllCmpControllerResultResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllCmpControllerResultResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.CmpControllerResult) > 0 {
		for iNdEx := len(m.CmpControllerResult) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.CmpControllerResult[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryParamsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryGetCmpDataRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Index)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetCmpDataResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.CmpData.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllCmpDataRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllCmpDataResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.CmpData) > 0 {
		for _, e := range m.CmpData {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetCmpControllerRequestRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Index)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetCmpControllerRequestResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.CmpControllerRequest.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllCmpControllerRequestRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllCmpControllerRequestResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.CmpControllerRequest) > 0 {
		for _, e := range m.CmpControllerRequest {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetCmpControllerResultRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Index)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetCmpControllerResultResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.CmpControllerResult.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllCmpControllerResultRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllCmpControllerResultResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.CmpControllerResult) > 0 {
		for _, e := range m.CmpControllerResult {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryParamsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetCmpDataRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetCmpDataRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetCmpDataRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Index = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetCmpDataResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetCmpDataResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetCmpDataResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CmpData", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.CmpData.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllCmpDataRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllCmpDataRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllCmpDataRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllCmpDataResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllCmpDataResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllCmpDataResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CmpData", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CmpData = append(m.CmpData, CmpData{})
			if err := m.CmpData[len(m.CmpData)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetCmpControllerRequestRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetCmpControllerRequestRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetCmpControllerRequestRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Index = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetCmpControllerRequestResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetCmpControllerRequestResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetCmpControllerRequestResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CmpControllerRequest", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.CmpControllerRequest.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllCmpControllerRequestRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllCmpControllerRequestRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllCmpControllerRequestRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllCmpControllerRequestResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllCmpControllerRequestResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllCmpControllerRequestResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CmpControllerRequest", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CmpControllerRequest = append(m.CmpControllerRequest, CmpControllerRequest{})
			if err := m.CmpControllerRequest[len(m.CmpControllerRequest)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetCmpControllerResultRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetCmpControllerResultRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetCmpControllerResultRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Index = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetCmpControllerResultResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetCmpControllerResultResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetCmpControllerResultResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CmpControllerResult", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.CmpControllerResult.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllCmpControllerResultRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllCmpControllerResultRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllCmpControllerResultRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllCmpControllerResultResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllCmpControllerResultResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllCmpControllerResultResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CmpControllerResult", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CmpControllerResult = append(m.CmpControllerResult, CmpControllerResult{})
			if err := m.CmpControllerResult[len(m.CmpControllerResult)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
