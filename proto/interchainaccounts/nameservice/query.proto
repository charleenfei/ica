syntax = "proto3";
package cosmos.interchainaccounts.nameservice;

import "gogoproto/gogo.proto";
import "google/api/annotations.proto";
import "cosmos/base/query/v1beta1/pagination.proto";
import "interchainaccounts/nameservice/params.proto";
import "interchainaccounts/nameservice/whois.proto";
import "interchainaccounts/nameservice/testmin.proto";
import "interchainaccounts/nameservice/pending_buy.proto";
import "interchainaccounts/nameservice/pending_sell.proto";
// this line is used by starport scaffolding # 1

option go_package = "github.com/cosmos/interchain-accounts/x/nameservice/types";

// Query defines the gRPC querier service.
service Query {
  // Parameters queries the parameters of the module.
  rpc Params(QueryParamsRequest) returns (QueryParamsResponse) {
    option (google.api.http).get = "/cosmos/interchain-accounts/nameservice/params";
  }
  // Queries a Whois by index.
	rpc Whois(QueryGetWhoisRequest) returns (QueryGetWhoisResponse) {
		option (google.api.http).get = "/cosmos/interchain-accounts/nameservice/whois/{index}";
	}

	// Queries a list of Whois items.
	rpc WhoisAll(QueryAllWhoisRequest) returns (QueryAllWhoisResponse) {
		option (google.api.http).get = "/cosmos/interchain-accounts/nameservice/whois";
	}

// Queries a Testmin by index.
	rpc Testmin(QueryGetTestminRequest) returns (QueryGetTestminResponse) {
		option (google.api.http).get = "/cosmos/interchain-accounts/nameservice/testmin";
	}
// Queries a PendingBuy by index.
	rpc PendingBuy(QueryGetPendingBuyRequest) returns (QueryGetPendingBuyResponse) {
		option (google.api.http).get = "/cosmos/interchain-accounts/nameservice/pending_buy/{index}";
	}

	// Queries a list of PendingBuy items.
	rpc PendingBuyAll(QueryAllPendingBuyRequest) returns (QueryAllPendingBuyResponse) {
		option (google.api.http).get = "/cosmos/interchain-accounts/nameservice/pending_buy";
	}

// Queries a PendingSell by index.
	rpc PendingSell(QueryGetPendingSellRequest) returns (QueryGetPendingSellResponse) {
		option (google.api.http).get = "/cosmos/interchain-accounts/nameservice/pending_sell/{name}";
	}

	// Queries a list of PendingSell items.
	rpc PendingSellAll(QueryAllPendingSellRequest) returns (QueryAllPendingSellResponse) {
		option (google.api.http).get = "/cosmos/interchain-accounts/nameservice/pending_sell";
	}

// this line is used by starport scaffolding # 2
}

// QueryParamsRequest is request type for the Query/Params RPC method.
message QueryParamsRequest {}

// QueryParamsResponse is response type for the Query/Params RPC method.
message QueryParamsResponse {
  // params holds all the parameters of this module.
  Params params = 1 [(gogoproto.nullable) = false];
}

message QueryGetWhoisRequest {
	  string index = 1;

}

message QueryGetWhoisResponse {
	Whois whois = 1 [(gogoproto.nullable) = false];
}

message QueryAllWhoisRequest {
	cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

message QueryAllWhoisResponse {
	repeated Whois whois = 1 [(gogoproto.nullable) = false];
	cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

message QueryGetTestminRequest {}

message QueryGetTestminResponse {
	Testmin Testmin = 1 [(gogoproto.nullable) = false];
}
message QueryGetPendingBuyRequest {
	  string index = 1;

}

message QueryGetPendingBuyResponse {
	PendingBuy pendingBuy = 1 [(gogoproto.nullable) = false];
}

message QueryAllPendingBuyRequest {
	cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

message QueryAllPendingBuyResponse {
	repeated PendingBuy pendingBuy = 1 [(gogoproto.nullable) = false];
	cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

message QueryGetPendingSellRequest {
	  string name = 1;

}

message QueryGetPendingSellResponse {
	PendingSell pendingSell = 1 [(gogoproto.nullable) = false];
}

message QueryAllPendingSellRequest {
	cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

message QueryAllPendingSellResponse {
	repeated PendingSell pendingSell = 1 [(gogoproto.nullable) = false];
	cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

// this line is used by starport scaffolding # 3
